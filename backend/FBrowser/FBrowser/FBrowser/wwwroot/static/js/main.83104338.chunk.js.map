{"version":3,"sources":["Stores/Api.ts","Stores/Util.ts","Stores/AppStore.ts","SuiteList/SuiteList.tsx","Suite/Suite.tsx","Case/CaseList.tsx","Sample/SampleList.tsx","NavBar.tsx","Group/Group.tsx","Logs/Logs.tsx","App.tsx","serviceWorker.ts","index.tsx"],"names":["a","fetch","response","json","result","id","parentId","LogUtil","all","filterString","parents","suites","s","name","groupsFiltered","slice","map","g","getSuiteArray","filter","toLowerCase","indexOf","_","arr","filteredGroups","toJS","e","find","LogStore","getCasesBySuiteId","computedFn","suiteId","cases","getCaseList","get","getSamplesByCaseId","createTransformer","caseId","samples","getSampleList","this","_suiteGroups","inputString","set","caseList","populateCases","sampleList","populateSample","fetchSuites","then","setSuiteList","fetchCasesById","setCaseList","fetchSampleById","setSampleList","nested","suiteListFiltered","length","getFlattenedSuiteList","suiteGroups","filterSuiteGroups","populateSuites","observable","Map","action","computed","LogContext","React","createContext","SuiteList","observer","store","useContext","classes","useStyles","Paper","className","root","Table","table","size","TableHead","TableRow","TableCell","TableBody","suiteListAll","suite","hover","key","style","parentid","paddingLeft","fontSize","component","scope","to","makeStyles","theme","createStyles","width","marginTop","spacing","overflowX","justifyContent","minWidth","isChild","marginLeft","isParent","Suite","match","useState","setSuite","params","useEffect","fetchSuiteById","c","singleSample","status","log","CaseList","ctx","SampleList","search","position","borderRadius","shape","backgroundColor","fade","palette","common","white","breakpoints","up","searchIcon","height","pointerEvents","display","alignItems","inputRoot","color","inputInput","padding","transition","transitions","create","tab","NavBar","withRouter","history","Grid","item","xs","AppBar","Toolbar","InputBase","placeholder","input","inputProps","onChange","event","setFilterString","target","value","Tabs","location","pathname","newValue","push","Tab","label","Group","suiteGroup","setSuiteGroup","fetchSuitesByParentId","f","Logs","console","pageContent","paddingTop","Boolean","window","hostname","ReactDOM","render","container","path","exact","document","getElementById","navigator","serviceWorker","ready","registration","unregister"],"mappings":"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","file":"static/js/main.83104338.chunk.js","sourcesContent":["import { Group, Suite, Case, Sample } from \"./AppStore\";\r\n\r\nexport async function fetchSuites(): Promise<Group[]> {\r\n  const response = await fetch(\"/api/suites\");\r\n  const result: Group[] = await response.json();\r\n  return result;\r\n}\r\n\r\nexport async function fetchSuiteById(id: string): Promise<Suite> {\r\n  const response = await fetch(`/api/suites/${id}`);\r\n  const result: Suite = await response.json();\r\n  return result;\r\n}\r\n\r\nexport async function fetchCasesById(id: string): Promise<Case[]> {\r\n  const response = await fetch(`/api/cases/${id}`);\r\n  const result: Case[] = await response.json();\r\n  return result;\r\n}\r\n\r\nexport async function fetchSampleById(id: string): Promise<Sample[]> {\r\n  const response = await fetch(`/api/samples/${id}`);\r\n  const result: Sample[] = await response.json();\r\n  return result;\r\n}\r\n\r\nexport async function fetchSuitesByParentId(\r\n  parentId: string\r\n): Promise<Suite[]> {\r\n  const response = await fetch(`/api/suites/group/${parentId}`);\r\n  const result: Suite[] = await response.json();\r\n  return result;\r\n}\r\n","import * as _ from \"lodash\";\r\nimport { toJS } from \"mobx\";\r\nimport { Group, Suite } from \"./AppStore\";\r\n\r\nexport class LogUtil {\r\n  static filterSuiteGroups(all: Group[], filterString: string) {\r\n    const parents: { [id: string]: string } = {};\r\n    for (const s of all[0].suites) {\r\n      parents[s.id] = s.name;\r\n    }\r\n\r\n    const groupsUnFiltered = all.slice(1).map(g => {\r\n      return {\r\n        parentId: g.parentId,\r\n        suites: this.getSuiteArray(g.suites, filterString)\r\n      };\r\n    });\r\n\r\n    const groupsFiltered = groupsUnFiltered.filter(g => {\r\n      const parentMatched = parents[g.parentId!];\r\n      return (\r\n        parentMatched.toLowerCase().indexOf(filterString) !== -1 ||\r\n        !_.isEmpty(g.suites)\r\n      );\r\n    });\r\n    return [all[0], ...groupsFiltered];\r\n  }\r\n\r\n  static getSuiteArray(arr: Suite[], filterString: string) {\r\n    return arr.filter(s => s.name.toLowerCase().indexOf(filterString) !== -1);\r\n  }\r\n\r\n  static getFlattenedSuiteList(filteredGroups: Group[]): Suite[] {\r\n    const parents = toJS(filteredGroups[0].suites);\r\n    return _.flatMap(\r\n      filteredGroups.slice().filter(g => g.parentId != null),\r\n      e => {\r\n        return [parents.find(s => s.id === e.parentId), ...e.suites];\r\n      }\r\n    ) as Suite[];\r\n  }\r\n}\r\n","import { observable, action, computed } from \"mobx\";\r\nimport { fetchCasesById, fetchSampleById, fetchSuites } from \"./Api\";\r\nimport { computedFn, createTransformer } from \"mobx-utils\";\r\nimport * as _ from \"lodash\";\r\nimport { LogUtil } from \"./Util\";\r\nimport React from \"react\";\r\n\r\n\r\nexport interface Case {\r\n  id: string;\r\n  name: string;\r\n}\r\n\r\n\r\nexport interface Sample {\r\n  id: string;\r\n  name: string;\r\n  suiteid: string;\r\n  status: string;\r\n}\r\n\r\nexport interface Group {\r\n  parentId: null | string;\r\n  suites: Suite[];\r\n}\r\n\r\nexport interface Suite {\r\n  id: string;\r\n  name: string;\r\n  parentid: null | string;\r\n}\r\n\r\n\r\nexport class LogStore {\r\n  @observable _suiteGroups: Group[] | undefined = undefined;\r\n  @observable cases = new Map<string, Case[]>();\r\n  @observable samples = new Map<string, Sample[]>();\r\n  @observable filterString = \"\";\r\n\r\n  @action\r\n  setSuiteList(suites: Group[]): void {\r\n    this._suiteGroups = suites;\r\n  }\r\n\r\n  @action\r\n  setFilterString(inputString: string): void {\r\n    this.filterString = inputString.toLowerCase();\r\n  }\r\n\r\n  @action\r\n  setCaseList(suiteId: string, cases: Case[]): void {\r\n    this.cases.set(suiteId, cases);\r\n  }\r\n\r\n  @action\r\n  setSampleList(caseId: string, samples: Sample[]): void {\r\n    this.samples.set(caseId, samples);\r\n  }\r\n\r\n  @computed\r\n  get suiteListAll(): Suite[] {\r\n    const nested = this.suiteListFiltered;\r\n    if (!nested.length) {\r\n      return [];\r\n    }\r\n\r\n    const flattened = LogUtil.getFlattenedSuiteList(nested);\r\n\r\n    return flattened;\r\n  }\r\n\r\n  @computed\r\n  get suiteListFiltered(): Group[] {\r\n    const all = this.suiteGroups;\r\n\r\n    if (!all) {\r\n      return [];\r\n    }\r\n\r\n    const filtered = LogUtil.filterSuiteGroups(all, this.filterString);\r\n    return filtered;\r\n  }\r\n\r\n  getSuiteArray(arr: Suite[]): Suite[] {\r\n    return arr.filter(\r\n      s => s.name.toLowerCase().indexOf(this.filterString) !== -1\r\n    );\r\n  }\r\n\r\n  getCasesBySuiteId = computedFn((suiteId: string) => {\r\n    const cases = this.getCaseList(suiteId);\r\n    if (!cases) {\r\n      return [];\r\n    }\r\n\r\n    if (this.filterString == \"\") {\r\n      return cases;\r\n    }\r\n\r\n    return this.cases\r\n      .get(suiteId)!\r\n      .filter(\r\n        cases => cases.name.toLowerCase().indexOf(this.filterString) !== -1\r\n      );\r\n  });\r\n\r\n  getSamplesByCaseId = createTransformer((caseId: string) => {\r\n    const samples = this.getSampleList(caseId);\r\n    if (!samples) {\r\n      return [];\r\n    }\r\n\r\n    if (this.filterString == \"\") {\r\n      return samples;\r\n    }\r\n\r\n    return this.samples\r\n      .get(caseId)!\r\n      .filter(\r\n        samples => samples.name.toLowerCase().indexOf(this.filterString) !== -1\r\n      );\r\n  });\r\n\r\n  get suiteGroups(): Group[] | undefined {\r\n    if (this._suiteGroups) {\r\n      return this._suiteGroups;\r\n    }\r\n\r\n    this.populateSuites();\r\n    return undefined;\r\n  }\r\n\r\n  getCaseList(suiteId: string): Case[] | undefined {\r\n    const caseList = this.cases.get(suiteId);\r\n\r\n    if (!caseList) {\r\n      this.populateCases(suiteId);\r\n    }\r\n    return caseList;\r\n  }\r\n\r\n  getSampleList(caseId: string): Sample[] | undefined {\r\n    const sampleList = this.samples.get(caseId);\r\n\r\n    if (!sampleList) {\r\n      this.populateSample(caseId);\r\n    }\r\n    return sampleList;\r\n  }\r\n\r\n  populateSuites(): void {\r\n    fetchSuites().then(result => this.setSuiteList(result));\r\n  }\r\n\r\n  populateCases(suiteId: string): void {\r\n    fetchCasesById(suiteId).then(result => this.setCaseList(suiteId, result));\r\n  }\r\n\r\n  populateSample(caseId: string): void {\r\n    fetchSampleById(caseId).then(result => this.setSampleList(caseId, result));\r\n  }\r\n}\r\n\r\nexport const LogContext = React.createContext(new LogStore());\r\n","import React, { useContext } from \"react\";\r\nimport { observer } from \"mobx-react\";\r\nimport { LogContext } from \"../Stores/AppStore\";\r\nimport { Link } from \"react-router-dom\";\r\nimport { Theme, createStyles, makeStyles } from \"@material-ui/core/styles\";\r\nimport Paper from \"@material-ui/core/Paper\";\r\nimport Table from \"@material-ui/core/Table\";\r\nimport TableHead from \"@material-ui/core/TableHead\";\r\nimport TableRow from \"@material-ui/core/TableRow\";\r\nimport TableBody from \"@material-ui/core/TableBody\";\r\nimport TableCell from \"@material-ui/core/TableCell\";\r\n\r\nexport const SuiteList: React.FC = observer(() => {\r\n  const store = useContext(LogContext);\r\n  const classes = useStyles();\r\n\r\n  return (\r\n    <Paper className={classes.root}>\r\n      <Table className={classes.table} size=\"small\">\r\n        <TableHead>\r\n          <TableRow>\r\n            <TableCell>Group / Suite name</TableCell>\r\n          </TableRow>\r\n        </TableHead>\r\n        <TableBody>\r\n          {store.suiteListAll.map(suite => (\r\n            <TableRow hover key={suite.id}>\r\n              <TableCell\r\n                style={\r\n                  suite.parentid\r\n                    ? { paddingLeft: \"25px\" }\r\n                    : { fontSize: \"15px\" }\r\n                }\r\n                component=\"th\"\r\n                scope=\"suite\"\r\n              >\r\n                  <Link\r\n                    to={\r\n                      suite.parentid\r\n                        ? `/suites/${suite.id}`\r\n                        : `/group/${suite.id}`\r\n                    }\r\n                  >\r\n                    {suite.name}\r\n                  </Link>\r\n              </TableCell>\r\n            </TableRow>\r\n          ))}\r\n        </TableBody>\r\n      </Table>\r\n    </Paper>\r\n  );\r\n});\r\n\r\nconst useStyles = makeStyles((theme: Theme) =>\r\n  createStyles({\r\n    root: {\r\n      width: 400,\r\n      marginTop: theme.spacing(3),\r\n      overflowX: \"auto\",\r\n      justifyContent: \"center\"\r\n    },\r\n    table: {\r\n      minWidth: 400\r\n    },\r\n    isChild: {\r\n      marginLeft: \"20px\"\r\n    },\r\n    isParent: {\r\n      fontSize: \"20px\"\r\n    }\r\n  })\r\n);\r\n","import React, { useContext, useState, useEffect } from \"react\";\r\nimport { toJS } from \"mobx\";\r\nimport { observer } from \"mobx-react\";\r\nimport { LogContext } from \"../Stores/AppStore\";\r\nimport { fetchSuiteById } from \"../Stores/Api\";\r\nimport { Suite as SuiteInterface } from \"../Stores/AppStore\";\r\nimport { RouteComponentProps, Link } from \"react-router-dom\";\r\n\r\ninterface RouteParams {\r\n  id: string;\r\n}\r\n\r\ninterface Props extends RouteComponentProps<RouteParams> {}\r\n\r\nfunction caseLink(id: string, name: string) {\r\n  const l = (\r\n    <p>\r\n      <Link to={`/cases/${id}`}>{name}</Link>\r\n    </p>\r\n  );\r\n  return l;\r\n\r\n  // return <a key={id} href=\"http://google.com\">{name}</a>;\r\n}\r\n\r\nexport const Suite: React.FC<Props> = observer(({ match }) => {\r\n  const store = useContext(LogContext);\r\n  const [suite, setSuite] = useState({} as SuiteInterface);\r\n  const cases = store.getCasesBySuiteId(match.params.id);\r\n\r\n  useEffect(() => {\r\n    if (!store._suiteGroups) {\r\n      fetchSuiteById(match.params.id).then(result => setSuite(result));\r\n      return;\r\n    }\r\n    setSuite(\r\n      toJS(store.suiteListAll).filter(suite => match.params.id === suite.id)[0]\r\n    );\r\n  }, []);\r\n\r\n  return (\r\n    <div>\r\n      <span>{suite ? suite.name : null}</span>\r\n      <ul>{cases.map(c => caseLink(c.id, c.name))}</ul>\r\n    </div>\r\n  );\r\n});\r\n","import React, { useContext, useEffect } from \"react\";\r\nimport { LogContext } from \"../Stores/AppStore\";\r\nimport { observer } from \"mobx-react-lite\";\r\nimport { RouteComponentProps } from \"react-router\";\r\nimport { Link } from \"react-router-dom\";\r\n\r\ninterface CaseProp {\r\n  id: string;\r\n}\r\n\r\ninterface Props extends RouteComponentProps<CaseProp> {}\r\n\r\nfunction logLink(id: string, name: string) {\r\n  return <Link\r\n    to= { \"/logs/\" + id}>\r\n      {name}\r\n    </Link>\r\n}\r\n\r\nfunction singleSample(s) {\r\n  return (\r\n    <tr>\r\n      <td>{s.name}</td>\r\n      <td>{s.status}</td>\r\n      \r\n      <td>\r\n        {logLink(s.log.id, s.log.name)}\r\n      \r\n      </td>\r\n    </tr>\r\n  );\r\n}\r\n\r\nexport const CaseList: React.FC<Props> = observer(({ match }) => {\r\n  const ctx = useContext(LogContext);\r\n  const id = match.params.id;\r\n  const samples = ctx.getSamplesByCaseId(id);\r\n  return <table>{samples.map(s => singleSample(s))};</table>;\r\n});\r\n","import React from \"react\";\r\n\r\nexport const SampleList: React.FC = () => {\r\n  return <div>Sample</div>;\r\n};\r\n","import React, { useContext } from \"react\";\r\nimport Tab from \"@material-ui/core/Tab\";\r\nimport Tabs from \"@material-ui/core/Tabs\";\r\nimport Grid from \"@material-ui/core/Grid\";\r\nimport AppBar from \"@material-ui/core/AppBar\";\r\nimport Toolbar from \"@material-ui/core/Toolbar\";\r\nimport SearchIcon from \"@material-ui/icons/Search\";\r\nimport InputBase from \"@material-ui/core/InputBase\";\r\nimport { fade } from \"@material-ui/core/styles/colorManipulator\";\r\nimport { createStyles, Theme, makeStyles } from \"@material-ui/core/styles\";\r\nimport { withRouter } from \"react-router-dom\";\r\nimport { LogContext } from \"./Stores/AppStore\";\r\n\r\ninterface Props {\r\n  history: any;\r\n}\r\n\r\nexport const NavBarComponent: React.FC<Props> = ({ history }) => {\r\n  const classes = useStyles();\r\n  const store = useContext(LogContext);\r\n\r\n  function handleChange(event: React.ChangeEvent<{}>, newValue: number) {\r\n    history.push(newValue);\r\n  }\r\n\r\n  function handleSearchInput(event: React.ChangeEvent<HTMLInputElement>) {\r\n    store.setFilterString(event.target.value);\r\n  }\r\n\r\n  return (\r\n    <Grid item xs={12}>\r\n      <AppBar>\r\n        <Toolbar>\r\n          <Grid item xs={3}>\r\n            <div className={classes.search}>\r\n              <div className={classes.searchIcon}>\r\n                <SearchIcon />\r\n              </div>\r\n              <InputBase\r\n                placeholder=\"Search…\"\r\n                classes={{\r\n                  root: classes.inputRoot,\r\n                  input: classes.inputInput\r\n                }}\r\n                inputProps={{ \"aria-label\": \"Search\" }}\r\n                onChange={handleSearchInput}\r\n              />\r\n            </div>\r\n          </Grid>\r\n          <Grid item xs={8} style={{ paddingLeft: \"55px\" }}>\r\n            <Tabs value={history.location.pathname} onChange={handleChange}>\r\n              <Tab className={classes.tab} label=\"Home\" value=\"/home\" />\r\n              <Tab className={classes.tab} label=\"Suite list\" value=\"/suites\" />\r\n            </Tabs>\r\n          </Grid>\r\n        </Toolbar>\r\n      </AppBar>\r\n    </Grid>\r\n  );\r\n};\r\n\r\nconst useStyles = makeStyles((theme: Theme) =>\r\n  createStyles({\r\n    search: {\r\n      position: \"relative\",\r\n      borderRadius: theme.shape.borderRadius,\r\n      backgroundColor: fade(theme.palette.common.white, 0.15),\r\n      \"&:hover\": {\r\n        backgroundColor: fade(theme.palette.common.white, 0.25)\r\n      },\r\n      marginLeft: 0,\r\n      width: \"100%\",\r\n      [theme.breakpoints.up(\"sm\")]: {\r\n        marginLeft: theme.spacing(1),\r\n        width: \"auto\"\r\n      }\r\n    },\r\n    searchIcon: {\r\n      width: theme.spacing(7),\r\n      height: \"100%\",\r\n      position: \"absolute\",\r\n      pointerEvents: \"none\",\r\n      display: \"flex\",\r\n      alignItems: \"center\",\r\n      justifyContent: \"center\"\r\n    },\r\n    inputRoot: {\r\n      color: \"inherit\",\r\n      width: \"100%\"\r\n    },\r\n    inputInput: {\r\n      padding: theme.spacing(1, 1, 1, 7),\r\n      transition: theme.transitions.create(\"width\"),\r\n      width: \"100%\",\r\n      [theme.breakpoints.up(\"sm\")]: {\r\n        width: 120,\r\n        \"&:focus\": {\r\n          width: 200\r\n        }\r\n      }\r\n    },\r\n    tab: {\r\n      width: \"20%\"\r\n    }\r\n  })\r\n);\r\n\r\nexport const NavBar = withRouter(NavBarComponent as any);\r\n","import React, { useContext, useState, useEffect } from \"react\";\r\nimport { toJS } from \"mobx\";\r\nimport { observer } from \"mobx-react\";\r\nimport { LogContext } from \"../Stores/AppStore\";\r\nimport { fetchSuitesByParentId } from \"../Stores/Api\";\r\nimport { Suite as SuiteInterface } from \"../Stores/AppStore\";\r\nimport { LogUtil } from \"../Stores/Util\";\r\nimport { RouteComponentProps } from \"react-router-dom\";\r\n\r\ninterface RouteParams {\r\n  id: string;\r\n}\r\n\r\ninterface Props extends RouteComponentProps<RouteParams> {}\r\n\r\nexport const Group: React.FC<Props> = observer(({ match }) => {\r\n  const store = useContext(LogContext);\r\n  const [suiteGroup, setSuiteGroup] = useState({} as SuiteInterface[]);\r\n\r\n  useEffect(() => {\r\n    if (!store._suiteGroups) {\r\n      fetchSuitesByParentId(match.params.id).then(result =>\r\n        setSuiteGroup(LogUtil.getFlattenedSuiteList(result as any))\r\n      );\r\n      return;\r\n    }\r\n    setSuiteGroup(\r\n      toJS(store.suiteListAll).filter(\r\n        suite =>\r\n          match.params.id === suite.id || match.params.id === suite.parentid\r\n      )\r\n    );\r\n  }, []);\r\n\r\n  return (\r\n    <div>\r\n      <span>\r\n        {suiteGroup.length ? suiteGroup.filter(f => !f.parentid)[0].name : null}\r\n      </span>\r\n      <ul>\r\n        {suiteGroup.length\r\n          ? suiteGroup\r\n              .filter(s => s.parentid === match.params.id)\r\n              .map(c => <li key={c.id}>{c.name}</li>)\r\n          : null}\r\n      </ul>\r\n    </div>\r\n  );\r\n});\r\n","import { RouteComponentProps } from \"react-router\";\r\nimport { observer } from \"mobx-react\";\r\nimport { useContext, useEffect } from \"react\";\r\nimport { LogContext } from \"../Stores/AppStore\";\r\nimport React from \"react\";\r\n\r\ninterface RouteParams {\r\n  id: string;\r\n}\r\n\r\ninterface Props extends RouteComponentProps<RouteParams> {}\r\n\r\nexport const Logs: React.FC<Props> = observer(({ match }) => {\r\n  const store = useContext(LogContext);\r\n\r\n  useEffect(() => {\r\n    console.log(match.params.id);\r\n  }, []);\r\n\r\n  return (\r\n    <div>\r\n      This is log component for {match.params.id}\r\n    </div>\r\n  );\r\n});\r\n","import React from \"react\";\nimport { SuiteList } from \"./SuiteList/SuiteList\";\nimport { BrowserRouter as Router, Route, Switch, Link } from \"react-router-dom\";\nimport \"./App.css\";\nimport { Suite } from \"./Suite/Suite\";\nimport { CaseList } from \"./Case/CaseList\";\nimport { SampleList } from \"./Sample/SampleList\";\nimport { createStyles, Theme, makeStyles } from \"@material-ui/core/styles\";\nimport Grid from \"@material-ui/core/Grid\";\nimport { NavBar } from \"./NavBar\";\nimport { Group } from \"./Group/Group\";\nimport { Logs } from \"./Logs/Logs\";\n\nexport const App: React.FC = () => {\n  const classes = useStyles();\n\n  return (\n    <Grid container>\n      <Router>\n        <NavBar />\n        <Grid item xs={12}>\n          <div className={classes.pageContent}>\n            <Switch>\n              <Route path=\"/suites\" exact component={SuiteList} />\n              <Route path=\"/suites/:id\" component={Suite} />\n              <Route path=\"/group/:id\" component={Group} />\n              <Route path=\"/logs/:id\" component={Logs} />\n              <Route path=\"/cases/:id\" component={CaseList} />\n              <Route path=\"/Samples/:id\" component={SampleList} />\n            </Switch>\n          </div>\n        </Grid>\n      </Router>\n    </Grid>\n  );\n};\n\nconst useStyles = makeStyles((theme: Theme) =>\n  createStyles({\n    root: {},\n    pageContent: {\n      paddingTop: \"10%\"\n    }\n  })\n);\n","// This optional code is used to register a service worker.\n// register() is not called by default.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on subsequent visits to a page, after all the\n// existing tabs open on the page have been closed, since previously cached\n// resources are updated in the background.\n\n// To learn more about the benefits of this model and instructions on how to\n// opt-in, read https://bit.ly/CRA-PWA\n\nconst isLocalhost = Boolean(\n  window.location.hostname === 'localhost' ||\n    // [::1] is the IPv6 localhost address.\n    window.location.hostname === '[::1]' ||\n    // 127.0.0.1/8 is considered localhost for IPv4.\n    window.location.hostname.match(\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\n    )\n);\n\ntype Config = {\n  onSuccess?: (registration: ServiceWorkerRegistration) => void;\n  onUpdate?: (registration: ServiceWorkerRegistration) => void;\n};\n\nexport function register(config?: Config) {\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\n    // The URL constructor is available in all browsers that support SW.\n    const publicUrl = new URL(\n      (process as { env: { [key: string]: string } }).env.PUBLIC_URL,\n      window.location.href\n    );\n    if (publicUrl.origin !== window.location.origin) {\n      // Our service worker won't work if PUBLIC_URL is on a different origin\n      // from what our page is served on. This might happen if a CDN is used to\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\n      return;\n    }\n\n    window.addEventListener('load', () => {\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\n\n      if (isLocalhost) {\n        // This is running on localhost. Let's check if a service worker still exists or not.\n        checkValidServiceWorker(swUrl, config);\n\n        // Add some additional logging to localhost, pointing developers to the\n        // service worker/PWA documentation.\n        navigator.serviceWorker.ready.then(() => {\n          console.log(\n            'This web app is being served cache-first by a service ' +\n              'worker. To learn more, visit https://bit.ly/CRA-PWA'\n          );\n        });\n      } else {\n        // Is not localhost. Just register service worker\n        registerValidSW(swUrl, config);\n      }\n    });\n  }\n}\n\nfunction registerValidSW(swUrl: string, config?: Config) {\n  navigator.serviceWorker\n    .register(swUrl)\n    .then(registration => {\n      registration.onupdatefound = () => {\n        const installingWorker = registration.installing;\n        if (installingWorker == null) {\n          return;\n        }\n        installingWorker.onstatechange = () => {\n          if (installingWorker.state === 'installed') {\n            if (navigator.serviceWorker.controller) {\n              // At this point, the updated precached content has been fetched,\n              // but the previous service worker will still serve the older\n              // content until all client tabs are closed.\n              console.log(\n                'New content is available and will be used when all ' +\n                  'tabs for this page are closed. See https://bit.ly/CRA-PWA.'\n              );\n\n              // Execute callback\n              if (config && config.onUpdate) {\n                config.onUpdate(registration);\n              }\n            } else {\n              // At this point, everything has been precached.\n              // It's the perfect time to display a\n              // \"Content is cached for offline use.\" message.\n              console.log('Content is cached for offline use.');\n\n              // Execute callback\n              if (config && config.onSuccess) {\n                config.onSuccess(registration);\n              }\n            }\n          }\n        };\n      };\n    })\n    .catch(error => {\n      console.error('Error during service worker registration:', error);\n    });\n}\n\nfunction checkValidServiceWorker(swUrl: string, config?: Config) {\n  // Check if the service worker can be found. If it can't reload the page.\n  fetch(swUrl)\n    .then(response => {\n      // Ensure service worker exists, and that we really are getting a JS file.\n      const contentType = response.headers.get('content-type');\n      if (\n        response.status === 404 ||\n        (contentType != null && contentType.indexOf('javascript') === -1)\n      ) {\n        // No service worker found. Probably a different app. Reload the page.\n        navigator.serviceWorker.ready.then(registration => {\n          registration.unregister().then(() => {\n            window.location.reload();\n          });\n        });\n      } else {\n        // Service worker found. Proceed as normal.\n        registerValidSW(swUrl, config);\n      }\n    })\n    .catch(() => {\n      console.log(\n        'No internet connection found. App is running in offline mode.'\n      );\n    });\n}\n\nexport function unregister() {\n  if ('serviceWorker' in navigator) {\n    navigator.serviceWorker.ready.then(registration => {\n      registration.unregister();\n    });\n  }\n}\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\nimport {App} from './App';\nimport * as serviceWorker from './serviceWorker';\n\nReactDOM.render(<App />, document.getElementById('root'));\n\n// If you want your app to work offline and load faster, you can change\n// unregister() to register() below. Note this comes with some pitfalls.\n// Learn more about service workers: https://bit.ly/CRA-PWA\nserviceWorker.unregister();\n"],"sourceRoot":""}